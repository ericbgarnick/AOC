import pytest
from typing import List

from .scanner import align, Scanner

#
# @pytest.mark.parametrize(
#     "ref_values,new_values,alignment_factor",
#     [
#         (
#             [-9, -3, 1, 2, 3, 5, 7, 10, 11, 15, 18, 20, 23, 24, 35, 38, 39, 41, 51, 54],
#             [-15, -2, 0, 5, 7, 12, 13, 14, 17, 21, 25, 28, 29, 33, 34, 45, 49, 55, 61, 64],
#             10
#         ),
#         (
#             [-24, -15, -12, -4, 1, 3, 7, 13, 21, 31, 43, 57, 73, 74, 91, 92, 101, 102, 103, 123],
#             [-49, -47, -43, -37, -29, -21, -19, -12, -7, -5, 7, 23, -34, 41, -36, -45, 51, 60, 66, 73],
#             -50
#         )
#     ],
# )
# def test_align(ref_values: List[int], new_values: List[int], alignment_factor: int):
#     assert align(ref_values, new_values) == alignment_factor
#
#
def test_overlaps():
    ref_scanner = Scanner([
        (404, -588, -901),
        (528, -643, 409),
        (-838, 591, 734),
        (390, -675, -793),
        (-537, -823, -458),
        (-485, -357, 347),
        (-345, -311, 381),
        (-661, -816, -575),
        (-876, 649, 763),
        (-618, -824, -621),
        (553, 345, -567),
        (474, 580, 667),
        (-447, -329, 318),
        (-584, 868, -557),
        (544, -627, -890),
        (564, 392, -477),
        (455, 729, 728),
        (-892, 524, 684),
        (-689, 845, -530),
        (423, -701, 434),
        (7, -33, -71),
        (630, 319, -379),
        (443, 580, 662),
        (-789, 900, -551),
        (459, -707, 401),
    ])
    new_scanner = Scanner([
        (686, 422, 578),
        (605, 423, 415),
        (515, 917, -361),
        (-336, 658, 858),
        (95, 138, 22),
        (-476, 619, 847),
        (-340, -569, -846),
        (567, -361, 727),
        (-460, 603, -452),
        (669, -402, 600),
        (729, 430, 532),
        (-500, -761, 534),
        (-322, 571, 750),
        (-466, -666, -811),
        (-429, -592, 574),
        (-355, 545, -477),
        (703, -491, -529),
        (-328, -685, 520),
        (413, 935, -424),
        (-391, 539, -444),
        (586, -435, 557),
        (-364, -763, -893),
        (807, -499, -711),
        (755, -354, -619),
        (553, 889, -390),
    ])
    assert new_scanner.overlaps(ref_scanner)
    assert new_scanner.overlaps(ref_scanner)  # Confirm idempotency


@pytest.mark.parametrize(
    "ref_scanner,new_scanner,res_scanner",
    [
        pytest.param(
            Scanner([
                (1, 5, 10),
                (2, 6, 11),
                (3, 7, 12),
                (4, 8, 13),
                (5, 9, 14),
                (6, 10, 15),
                (7, 11, 16),
                (8, 12, 17),
                (9, 13, 18),
                (10, 14, 19),
                (11, 15, 20),
                (12, 16, 21),
                (23, 23, 22),
                (29, 29, 29),
                (31, 31, 31),
                (37, 37, 37),
                (41, 41, 41),
                (43, 43, 43),
                (47, 47, 47),
                (53, 53, 53),
                (59, 59, 59),
                (61, 61, 61),
                (67, 67, 67),
                (71, 71, 71),
                (73, 73, 73),
                (79, 79, 79),
            ]),
            Scanner([
                (51, 55, 60),
                (52, 56, 61),
                (53, 57, 62),
                (54, 58, 63),
                (55, 59, 64),
                (56, 60, 65),
                (57, 61, 66),
                (58, 62, 67),
                (59, 63, 68),
                (60, 64, 69),
                (61, 65, 70),
                (62, 66, 71),
                (524, 524, 524),
                (530, 530, 530),
                (532, 532, 532),
                (538, 538, 538),
                (542, 542, 542),
                (544, 544, 544),
                (548, 548, 548),
                (554, 554, 554),
                (570, 570, 570),
                (572, 572, 572),
                (578, 578, 578),
                (582, 582, 582),
                (584, 584, 584),
                (590, 590, 590),
            ]),
            Scanner([
                (1, 5, 10),
                (2, 6, 11),
                (3, 7, 12),
                (4, 8, 13),
                (5, 9, 14),
                (6, 10, 15),
                (7, 11, 16),
                (8, 12, 17),
                (9, 13, 18),
                (10, 14, 19),
                (11, 15, 20),
                (12, 16, 21),
                (474, 474, 474),
                (480, 480, 480),
                (482, 482, 482),
                (488, 488, 488),
                (492, 492, 492),
                (494, 494, 494),
                (498, 498, 498),
                (504, 504, 504),
                (520, 520, 520),
                (522, 522, 522),
                (528, 528, 528),
                (532, 532, 532),
                (534, 534, 534),
                (540, 540, 540),
            ]),
            id="Only shift, no rotation"
        ),
        pytest.param(
            Scanner([
                (1, 5, 10),
                (2, 6, 11),
                (3, 7, 12),
                (4, 8, 13),
                (5, 9, 14),
                (6, 10, 15),
                (7, 11, 16),
                (8, 12, 17),
                (9, 13, 18),
                (10, 14, 19),
                (11, 15, 20),
                (12, 16, 21),
                (23, 23, 23),
                (29, 29, 29),
                (31, 31, 31),
                (37, 37, 37),
                (41, 41, 41),
                (43, 43, 43),
                (47, 47, 47),
                (53, 53, 53),
                (59, 59, 59),
                (61, 61, 61),
                (67, 67, 67),
                (71, 71, 71),
                (73, 73, 73),
                (79, 79, 79),
            ]),
            Scanner([
                (-51, 55, -60),
                (-52, 56, -61),
                (-53, 57, -62),
                (-54, 58, -63),
                (-55, 59, -64),
                (-56, 60, -65),
                (-57, 61, -66),
                (-58, 62, -67),
                (-59, 63, -68),
                (-60, 64, -69),
                (-61, 65, -70),
                (-62, 66, -71),
                (-524, 524, -524),
                (-530, 530, -530),
                (-532, 532, -532),
                (-538, 538, -538),
                (-542, 542, -542),
                (-544, 544, -544),
                (-548, 548, -548),
                (-554, 554, -554),
                (-570, 570, -570),
                (-572, 572, -572),
                (-578, 578, -578),
                (-582, 582, -582),
                (-584, 584, -584),
                (-590, 590, -590),
            ]),
            Scanner([
                (1, 5, 10),
                (2, 6, 11),
                (3, 7, 12),
                (4, 8, 13),
                (5, 9, 14),
                (6, 10, 15),
                (7, 11, 16),
                (8, 12, 17),
                (9, 13, 18),
                (10, 14, 19),
                (11, 15, 20),
                (12, 16, 21),
                (474, 474, 474),
                (480, 480, 480),
                (482, 482, 482),
                (488, 488, 488),
                (492, 492, 492),
                (494, 494, 494),
                (498, 498, 498),
                (504, 504, 504),
                (520, 520, 520),
                (522, 522, 522),
                (528, 528, 528),
                (532, 532, 532),
                (534, 534, 534),
                (540, 540, 540),
            ]),
            id="rotate 180 over Y-axis"
        ),
    ],
)
def test_overlaps_orientation(ref_scanner: Scanner, new_scanner: Scanner, res_scanner: Scanner):
    print("NEW SCANNER BEFORE:", new_scanner.beacons)
    assert new_scanner.overlaps(ref_scanner)
    print("NEW SCANNER AFTER:", new_scanner.beacons)
    # assert new_scanner.beacons == res_scanner.beacons
